#Requires AutoHotkey v2.0
#SingleInstance Force
#Warn All, Off

; === Paths ===
iniPath := A_ScriptDir . "\AutoHDR.ini"
logDir := A_AppData . "\AutoHDR"
if !DirExist(logDir)
    DirCreate logDir
logPath := logDir . "\AutoHDR.log"
toggleHDRPath := A_ScriptDir . "\ToggleHDRv2.ps1"

; === System Vars ===
gameList := []
failCount := 0
maxFails := 5

; === Visual Styling ===
ColorEnabled := "00BFFF"   ; HDR On (Blue)
ColorDisabled := "FFFFFF"  ; HDR Off (White)
ColorError := "FF0000"     ; Error (Red)
ColorInfo := "FFFF00"      ; Info (Yellow)
BackgroundColor := "Black"

; === Log Initialization ===
InitLog()

; === INI Validation ===
if !FileExist(iniPath) {
    LogAction("ERROR", "AutoHDR.ini missing — terminating script")
    ShowInfoTooltip("❗ Missing AutoHDR.ini config file. Add [Games] section with .exe titles.", ColorInfo)
    Sleep 10000
    ExitApp
}

gameSection := IniRead(iniPath, "Games", , "")
validCount := 0

for line in StrSplit(gameSection, "`n", "`r") {
    trimmed := Trim(line)
    if trimmed = "" || RegExMatch(trimmed, "^(#|;)")
        continue
    if !RegExMatch(trimmed, "\.exe$") {
        LogAction("ERROR", "Invalid game entry skipped in INI: " . trimmed)
        continue
    }
    if gameList.Has(trimmed) {
        LogAction("INFO", "Duplicate game entry skipped in INI: " . trimmed)
        continue
    }
    gameList.Push(trimmed)
    validCount += 1
}

if validCount = 0 {
    LogAction("ERROR", "INI contains no valid .exe entries — terminating script")
    ShowInfoTooltip("❗ AutoHDR.ini is present but contains no valid game entries.", ColorInfo)
    Sleep 10000
    ExitApp
}

; === Tooltip GUI Defaults ===
DefaultGuiOpts := "+AlwaysOnTop -Caption +ToolWindow -DPIScale"
DefaultFontFace := "Segoe UI"
DefaultOpacity := 220

tooltipGui := Gui(DefaultGuiOpts)
tooltipGui.Opacity := DefaultOpacity
tooltipGui.BackColor := BackgroundColor
tooltipGui.SetFont("s12 bold", DefaultFontFace)

; === Tray Icon Initialization ===
SetTrayStatusIcon(false)

; === Monitor Loop ===
SetTimer(MonitorGames, 3000)

MonitorGames() {
    static hdrOn := false
    if IsGameRunning() {
        if !hdrOn {
            if RunToggleHDR("on") {
                SetTrayStatusIcon(true)
                ShowHDRTooltip("🔆 HDR Enabled for Gaming", ColorEnabled)
                LogAction("INFO", "HDR Enabled")
                hdrOn := true
            }
        }
    } else {
        if hdrOn {
            if RunToggleHDR("off") {
                SetTrayStatusIcon(false)
                ShowHDRTooltip("🌑 HDR Disabled (No Game Running)", ColorDisabled)
                LogAction("INFO", "HDR Disabled")
                hdrOn := false
            }
        }
    }
}

IsGameRunning() {
    global gameList
    for title in gameList {
        if ProcessExist(title)
            return true
    }
    return false
}

RunToggleHDR(state) {
    global failCount, maxFails, toggleHDRPath
    static lastFailTime := 0
    now := A_TickCount

    if !FileExist(toggleHDRPath) {
        failCount += 1
        if (now - lastFailTime > 15000) {
            lastFailTime := now
            LogAction("ERROR", "ToggleHDRv2.ps1 not found")
        }
        if failCount <= maxFails
            ShowErrorTooltip("⚠️ HDR script missing")
        return false
    }

    result := RunWait('*RunAs powershell.exe -ExecutionPolicy Bypass -File "' toggleHDRPath '" ' state, , "Hide")
    if (result != 0) {
        failCount += 1
        if (now - lastFailTime > 15000) {
            lastFailTime := now
            LogAction("ERROR", "PowerShell HDR toggle failed with code: " . result)
        }
        if failCount <= maxFails
            ShowErrorTooltip("⚠️ HDR toggle failed (" . state . ")")
        return false
    } else {
        failCount := 0
        return true
    }
}

SetTrayStatusIcon(status) {
    iconFile := status
        ? A_ScriptDir "\monitor_icon_on.ico"
        : A_ScriptDir "\monitor_icon_off.ico"
    TraySetIcon iconFile
}

ShowHDRTooltip(text, color) {
    global tooltipGui, BackgroundColor, DefaultGuiOpts, DefaultOpacity, DefaultFontFace
    fontSize := GetFontSizeByText(text)
    tooltipGui.Destroy()
    tooltipGui := Gui(DefaultGuiOpts)
    tooltipGui.Opacity := DefaultOpacity
    tooltipGui.BackColor := BackgroundColor
    tooltipGui.SetFont(fontSize . " bold", DefaultFontFace)
    tooltipGui.AddText("c" . color . " Background" . BackgroundColor, text)
    MonitorGet(MonitorGetPrimary(), &left, &top, &right, &bottom)
    tooltipGui.Show("x" (right - 500) " y" (bottom - 150) " NoActivate")
    SetTimer(() => tooltipGui.Hide(), -4000)
}

ShowErrorTooltip(text) {
    ShowFixedTooltip(text, ColorError, 350, 150)
}

ShowInfoTooltip(text, color := ColorInfo) {
    ShowFixedTooltip(text, color, 350, 150)
}

ShowFixedTooltip(text, color, x, y) {
    global BackgroundColor
    local fontSize := GetFontSizeByText(text)
    local tempGui := Gui()
    tempGui.Opt("+AlwaysOnTop -Caption +ToolWindow -DPIScale")
    tempGui.Opacity := 220
    tempGui.BackColor := BackgroundColor
    tempGui.SetFont(fontSize . " bold", "Segoe UI")
    tempGui.AddText("c" . color . " Background" . BackgroundColor, text)
    tempGui.Show("x" x " y" y " NoActivate")
    SetTimer(() => tempGui.Hide(), -3000)
}

GetFontSizeByText(text) {
    len := StrLen(text)
    lines := StrSplit(text, "`n").Length
    return (len > 80 || lines > 2) ? "s10" : "s12"
}

LogAction(level, message) {
    global logPath
    timestamp := FormatTime(A_Now, "yyyy-MM-dd HH:mm:ss")
    FileAppend "[" . level . "] " . timestamp . " — " . message . "`n", logPath
}

InitLog() {
    global logPath
    if !FileExist(logPath) {
        FileAppend "", logPath
        return
    }
    fileTime := FileGetTime(logPath, "M")
    daysOld := (A_Now - fileTime) // 86400000
    if daysOld >= 30 {
        lines := FileRead(logPath)
        recentLines := StrSplit(lines, "`n")
        startIndex := Max(recentLines.Length - 100, 0)
        subset := recentLines.Slice(startIndex)
        FileDelete logPath
        for _, line in subset {
            FileAppend line . "`n", logPath
        }
    }
}
